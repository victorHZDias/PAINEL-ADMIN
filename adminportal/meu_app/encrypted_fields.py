# meu_app/encrypted_fields.py
import base64
from cryptography.fernet import Fernet
from django.db import models
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import gettext_lazy as _

# Inicializa o Fernet fora das funções para performance
_fernet_instance = None

def _get_fernet_instance():
    global _fernet_instance
    if _fernet_instance is None:
        key = settings.ENCRYPTION_KEY
        if not key:
            raise ImproperlyConfigured(
                "ENCRYPTION_KEY not found in Django settings. "
                "Set this variable to a base64-encoded 32-byte key generated by Fernet.generate_key()."
            )
        try:
            _fernet_instance = Fernet(key)
        except ValueError as e:
            raise ImproperlyConfigured(
                f"Invalid ENCRYPTION_KEY in Django settings. "
                f"Ensure it's a valid base64-encoded 32-byte key. Error: {e}"
            )
    return _fernet_instance

class EncryptedCharField(models.CharField):
    """
    Um campo CharField que criptografa o valor no banco de dados.
    """
    def __init__(self, *args, **kwargs):
        self.cipher = _get_fernet_instance()
        super().__init__(*args, **kwargs)

    def get_db_prep_value(self, value, connection, prepared=False):
        """Criptografa o valor antes de salvá-lo no banco de dados."""
        if value is None:
            return value
        if not isinstance(value, str):
            value = str(value)
        # Criptografar e codificar em base64 (Fernet já faz base64urlsafe)
        return self.cipher.encrypt(value.encode('utf-8')).decode('utf-8')

    def from_db_value(self, value, expression, connection):
        """Descriptografa o valor ao recuperá-lo do banco de dados."""
        if value is None:
            return value
        # Descriptografar (Fernet já lida com base64urlsafe)
        try:
            return self.cipher.decrypt(value.encode('utf-8')).decode('utf-8')
        except Exception as e:
            # Lidar com erros de descriptografia (ex: chave errada, dados corrompidos)
            print(f"Erro de descriptografia: {e}")
            return None # Ou levantar uma exceção mais específica

    def get_prep_value(self, value):
        """Prepara o valor antes da validação do formulário."""
        return value # Deixe o valor como está para validação no formulário/serializer

    def to_python(self, value):
        """
        Converte o valor para um objeto Python.
        Isso é chamado quando o valor é carregado de um formulário ou desserializado.
        """
        return value